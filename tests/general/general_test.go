// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package general

import (
	"fmt"
	"github.com/dipperin/dipperin-core/common"
	"github.com/dipperin/dipperin-core/common/hexutil"
	"github.com/dipperin/dipperin-core/common/log"
	"github.com/dipperin/dipperin-core/core/model"
	"github.com/ethereum/go-ethereum/rlp"
	"github.com/stretchr/testify/assert"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func TestLogger(t *testing.T) {
	m := map[string]string{"1": "2"}
	log.DLogger.Debug("Test", "m", m)
}

func TestRlpStringSlice(t *testing.T) {
	a := []string{"haha"}
	ab, err := rlp.EncodeToBytes(a)
	assert.NoError(t, err)
	var b []string
	err = rlp.DecodeBytes(ab, &b)
	assert.NoError(t, err)
	assert.Equal(t, "haha", b[0])
}

type user struct {
	id int
}

func TestSliceSort(t *testing.T) {
	users := []*user{nil, {id: 1}, nil, nil, {id: 3}, {id: 2}}
	sort.Slice(users, func(i, j int) bool {
		if reflect.ValueOf(users[i]).IsNil() {
			return false
		} else if reflect.ValueOf(users[j]).IsNil() {
			return true
		}
		if users[i].id > users[j].id {
			return true
		}
		return false
	})
	fmt.Println(users)
	assert.Equal(t, 3, users[0].id)
}

func TestXXX(t *testing.T) {
	hexB := "0x7b226572635f3230223a7b2262616c616e636573223a7b2230783030303036353332323535363630443965323238443939376463443832374465433638356239613137636131223a22307861663232222c2230783030303044416132386543353263323834636138344161634244363930333932363964376133363234376332223a22307862373132222c2230783030303046634439303339346539453930323232304266643741326430343433316233434642613265326444223a22307862333832222c2230783030303035454343463041416136453846343531303738343438613138323937306538306362446432353362223a22307862353235222c2230783030303062353738393845623830363439623246393939336438413339343145643139353936313336384539223a22307862373834222c2230783030303030433642383744443033643830643232393033316461644332636431304664384138433234313333223a22307862363637222c2230783030303037654465344435443830384441386132363732383462333845303041426363623432383839644632223a22307862343865222c2230783030303031356642626166333436646131323834633239343238393435343538326330654562343037356230223a223078323261356563222c2230783030303044384642613764443934363534453364666266613738423736626234306442363035623445366341223a22307862346438222c2230783030303065343437423842373835314433464244354336413033363235443238386366453942623565463045223a22307862336634222c2230783030303046393834373432423333304543393837433344463739433731634531653732393439384363363133223a22307862303964222c2230783030303046353562453637316538666632313834423043373138316165304534434439323432394330333443223a22307862353833222c2230783030303065613442393738416435324435636245464164366634653364623136383865443642363539313337223a22307862363637222c2230783030303033433432453364313644443539446235364537343164323930373735343433343439363838423230223a22307862373132222c2230783030303030616464303461633464353237446538363663444534633933614531363632323134363137423132223a22307861626630222c2230783030303043324335364336363162363446364564353930353632383141303834443743444334353132413830223a22307862303839222c2230783030303039313863373733383830423436323932394143453446393735436366454439426532643845666339223a22307861663830222c2230783030303035393636464645436339314632364246396236424232623745303941306430303436356532393430223a22307862623134222c2230783030303032423941663833393043336361314461353730353464433839343763396639326131434130433939223a22307862356635222c2230783030303036664337453942333964364330304137363741416441336530354145413762613864373145443644223a22307862343636222c2230783030303031376134356134323538383731413035344538323164424665653536413546434133346632386535223a223078323364376338222c2230783030303036443336374531334336446265633939366345353063383746353434383036333330623938346238223a223078323233666638222c2230783030303034393234343745343038314437333532314236383334436536324545463446334635453862426237223a22307862313831222c2230783030303062446566366631463831393036353232394135303234633139374546313933666131623938453464223a22307831663334333863306234222c2230783030303064353532433765633737333536363835373161386564393262353731323246323166436561353939223a22307862363637222c2230783030303034313739443537653435436233623534443646414546363965373436626632343045323837393738223a22307862353937227d2c22746f6b656e5f73796d626f6c223a224561726c79526577617264222c226f776e6572223a2230783030303062646566366631663831393036353232396135303234633139376566313933666131623938653464222c22746f6b656e5f6e616d65223a224561726c79546f6b656e222c22746f6b656e5f746f74616c5f737570706c79223a22307831663334623066623030222c22746f6b656e5f646563696d616c73223a337d2c2200006fc7e9b39d6c00a767aada3e05aea7ba8d71ed6d5f636f6d6d69745f6e756d223a3332362c226e6565645f63736b223a22307866386639363338316463303030222c226368616e67655f746f5f63736b5f746f6b656e223a22307830227d"
	jb, err := hexutil.Decode(hexB)
	assert.NoError(t, err)
	jStr := string(jb)

	i := strings.Index(jStr, "_commit_num")
	addrStr := jStr[:i]
	i = strings.LastIndex(addrStr, "\"")
	fmt.Println(addrStr)
	addr := common.BytesToAddress([]byte(addrStr[i+1:]))
	fmt.Println(addr)
}

func TestTxRlp(t *testing.T) {
	t.Skip()
	txRlpStr := "0xf86ae30896000030f7A9606f297c3ce98dE9DAC7668cDA4e3C19BB8080843b9aca0082271080f844a0c3cda356aaf0e0fc4344dccb6b7076184159c6d3f3b91e7160152b30cfd050f2a03cd6a7e690f31b934aa9be95201f30deaf3b68979621a318772fbaa05648b24a3980"
	tx := decodeTxRlpHex(txRlpStr)
	addr, err := tx.Sender(nil)
	assert.NoError(t, err)
	fmt.Println(tx, addr)

	txRlpStr = "0xf86ae30896000030f7A9606f297c3ce98dE9DAC7668cDA4e3C19BB8080843b9aca0082271080f844a0a14b4493754b127e716bd08877771abbe343f7da24394e52b3d79b29b1d50195a06b6a6a1fb5dca5a9e3b886204192ad4bc95a23ab5e0bee93fb7ce87dd9b059b83980"
	tx = decodeTxRlpHex(txRlpStr)
	addr, err = tx.Sender(nil)
	assert.NoError(t, err)
	fmt.Println(tx, addr)
}

func decodeTxRlpHex(str string) *model.Transaction {
	txRlp, err := hexutil.Decode(str)
	if err != nil {
		panic(err)
	}

	var tx model.Transaction
	err = rlp.DecodeBytes(txRlp, &tx)
	if err != nil {
		panic(err)
	}
	return &tx
}
