// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dipperin/dipperin-core/core/chain-communication (interfaces: Chain)

// Package chain_communication is a generated GoMock package.
package chain_communication

import (
	common "github.com/dipperin/dipperin-core/common"
	model "github.com/dipperin/dipperin-core/core/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChain is a mock of Chain interface
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *MockChainMockRecorder
}

// MockChainMockRecorder is the mock recorder for MockChain
type MockChainMockRecorder struct {
	mock *MockChain
}

// NewMockChain creates a new mock instance
func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &MockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChain) EXPECT() *MockChainMockRecorder {
	return m.recorder
}

// CurrentBlock mocks base method
func (m *MockChain) CurrentBlock() model.AbstractBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(model.AbstractBlock)
	return ret0
}

// CurrentBlock indicates an expected call of CurrentBlock
func (mr *MockChainMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockChain)(nil).CurrentBlock))
}

// GetBlockByHash mocks base method
func (m *MockChain) GetBlockByHash(arg0 common.Hash) model.AbstractBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0)
	ret0, _ := ret[0].(model.AbstractBlock)
	return ret0
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockChainMockRecorder) GetBlockByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockChain)(nil).GetBlockByHash), arg0)
}

// GetBlockByNumber mocks base method
func (m *MockChain) GetBlockByNumber(arg0 uint64) model.AbstractBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", arg0)
	ret0, _ := ret[0].(model.AbstractBlock)
	return ret0
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockChainMockRecorder) GetBlockByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockChain)(nil).GetBlockByNumber), arg0)
}

// GetSeenCommit mocks base method
func (m *MockChain) GetSeenCommit(arg0 uint64) []model.AbstractVerification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeenCommit", arg0)
	ret0, _ := ret[0].([]model.AbstractVerification)
	return ret0
}

// GetSeenCommit indicates an expected call of GetSeenCommit
func (mr *MockChainMockRecorder) GetSeenCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeenCommit", reflect.TypeOf((*MockChain)(nil).GetSeenCommit), arg0)
}

// GetSlot mocks base method
func (m *MockChain) GetSlot(arg0 model.AbstractBlock) *uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot", arg0)
	ret0, _ := ret[0].(*uint64)
	return ret0
}

// GetSlot indicates an expected call of GetSlot
func (mr *MockChainMockRecorder) GetSlot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockChain)(nil).GetSlot), arg0)
}

// IsChangePoint mocks base method
func (m *MockChain) IsChangePoint(arg0 model.AbstractBlock, arg1 bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsChangePoint", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsChangePoint indicates an expected call of IsChangePoint
func (mr *MockChainMockRecorder) IsChangePoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsChangePoint", reflect.TypeOf((*MockChain)(nil).IsChangePoint), arg0, arg1)
}

// SaveBlock mocks base method
func (m *MockChain) SaveBlock(arg0 model.AbstractBlock, arg1 []model.AbstractVerification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlock indicates an expected call of SaveBlock
func (mr *MockChainMockRecorder) SaveBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlock", reflect.TypeOf((*MockChain)(nil).SaveBlock), arg0, arg1)
}
