// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dipperin/dipperin-core/core/chain-communication (interfaces: P2PServer)

// Package chain_communication is a generated GoMock package.
package chain_communication

import (
	enode "github.com/dipperin/dipperin-core/third-party/p2p/enode"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockP2PServer is a mock of P2PServer interface
type MockP2PServer struct {
	ctrl     *gomock.Controller
	recorder *MockP2PServerMockRecorder
}

// MockP2PServerMockRecorder is the mock recorder for MockP2PServer
type MockP2PServerMockRecorder struct {
	mock *MockP2PServer
}

// NewMockP2PServer creates a new mock instance
func NewMockP2PServer(ctrl *gomock.Controller) *MockP2PServer {
	mock := &MockP2PServer{ctrl: ctrl}
	mock.recorder = &MockP2PServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockP2PServer) EXPECT() *MockP2PServerMockRecorder {
	return m.recorder
}

// AddPeer mocks base method
func (m *MockP2PServer) AddPeer(arg0 *enode.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPeer", arg0)
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockP2PServerMockRecorder) AddPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockP2PServer)(nil).AddPeer), arg0)
}

// RemovePeer mocks base method
func (m *MockP2PServer) RemovePeer(arg0 *enode.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePeer", arg0)
}

// RemovePeer indicates an expected call of RemovePeer
func (mr *MockP2PServerMockRecorder) RemovePeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockP2PServer)(nil).RemovePeer), arg0)
}

// Self mocks base method
func (m *MockP2PServer) Self() *enode.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Self")
	ret0, _ := ret[0].(*enode.Node)
	return ret0
}

// Self indicates an expected call of Self
func (mr *MockP2PServerMockRecorder) Self() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Self", reflect.TypeOf((*MockP2PServer)(nil).Self))
}
