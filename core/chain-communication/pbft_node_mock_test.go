// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dipperin/dipperin-core/core/chain-communication (interfaces: PbftNode)

// Package chain_communication is a generated GoMock package.
package chain_communication

import (
	//chain_communication "github.com/dipperin/dipperin-core/core/chain-communication"
	model "github.com/dipperin/dipperin-core/core/model"
	p2p "github.com/dipperin/dipperin-core/third-party/p2p"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPbftNode is a mock of PbftNode interface
type MockPbftNode struct {
	ctrl     *gomock.Controller
	recorder *MockPbftNodeMockRecorder
}

// MockPbftNodeMockRecorder is the mock recorder for MockPbftNode
type MockPbftNodeMockRecorder struct {
	mock *MockPbftNode
}

// NewMockPbftNode creates a new mock instance
func NewMockPbftNode(ctrl *gomock.Controller) *MockPbftNode {
	mock := &MockPbftNode{ctrl: ctrl}
	mock.recorder = &MockPbftNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPbftNode) EXPECT() *MockPbftNodeMockRecorder {
	return m.recorder
}

// AddPeer mocks base method
func (m *MockPbftNode) AddPeer(arg0 PmAbstractPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockPbftNodeMockRecorder) AddPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockPbftNode)(nil).AddPeer), arg0)
}

// ChangePrimary mocks base method
func (m *MockPbftNode) ChangePrimary(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangePrimary", arg0)
}

// ChangePrimary indicates an expected call of ChangePrimary
func (mr *MockPbftNodeMockRecorder) ChangePrimary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePrimary", reflect.TypeOf((*MockPbftNode)(nil).ChangePrimary), arg0)
}

// OnEnterNewHeight mocks base method
func (m *MockPbftNode) OnEnterNewHeight(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnEnterNewHeight", arg0)
}

// OnEnterNewHeight indicates an expected call of OnEnterNewHeight
func (mr *MockPbftNodeMockRecorder) OnEnterNewHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEnterNewHeight", reflect.TypeOf((*MockPbftNode)(nil).OnEnterNewHeight), arg0)
}

// OnNewMsg mocks base method
func (m *MockPbftNode) OnNewMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnNewMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnNewMsg indicates an expected call of OnNewMsg
func (mr *MockPbftNodeMockRecorder) OnNewMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewMsg", reflect.TypeOf((*MockPbftNode)(nil).OnNewMsg), arg0)
}

// OnNewP2PMsg mocks base method
func (m *MockPbftNode) OnNewP2PMsg(arg0 p2p.Msg, arg1 PmAbstractPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnNewP2PMsg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnNewP2PMsg indicates an expected call of OnNewP2PMsg
func (mr *MockPbftNodeMockRecorder) OnNewP2PMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewP2PMsg", reflect.TypeOf((*MockPbftNode)(nil).OnNewP2PMsg), arg0, arg1)
}

// OnNewWaitVerifyBlock mocks base method
func (m *MockPbftNode) OnNewWaitVerifyBlock(arg0 model.AbstractBlock, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNewWaitVerifyBlock", arg0, arg1)
}

// OnNewWaitVerifyBlock indicates an expected call of OnNewWaitVerifyBlock
func (mr *MockPbftNodeMockRecorder) OnNewWaitVerifyBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewWaitVerifyBlock", reflect.TypeOf((*MockPbftNode)(nil).OnNewWaitVerifyBlock), arg0, arg1)
}
