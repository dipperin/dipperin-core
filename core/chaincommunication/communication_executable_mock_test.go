// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/chaincommunication (interfaces: CommunicationExecutable)

// Package chaincommunication is a generated GoMock package.
package chaincommunication

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommunicationExecutable is a mock of CommunicationExecutable interface
type MockCommunicationExecutable struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicationExecutableMockRecorder
}

// MockCommunicationExecutableMockRecorder is the mock recorder for MockCommunicationExecutable
type MockCommunicationExecutableMockRecorder struct {
	mock *MockCommunicationExecutable
}

// NewMockCommunicationExecutable creates a new mock instance
func NewMockCommunicationExecutable(ctrl *gomock.Controller) *MockCommunicationExecutable {
	mock := &MockCommunicationExecutable{ctrl: ctrl}
	mock.recorder = &MockCommunicationExecutableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommunicationExecutable) EXPECT() *MockCommunicationExecutableMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockCommunicationExecutable) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockCommunicationExecutableMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCommunicationExecutable)(nil).Start))
}

// Stop mocks base method
func (m *MockCommunicationExecutable) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockCommunicationExecutableMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCommunicationExecutable)(nil).Stop))
}
