// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/chaincommunication (interfaces: AbstractPeerSet)

// Package chaincommunication is a generated GoMock package.
package chaincommunication

import (
	p2p "github.com/dipperin/dipperin-core/third_party/p2p"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAbstractPeerSet is a mock of AbstractPeerSet interface
type MockAbstractPeerSet struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractPeerSetMockRecorder
}

// MockAbstractPeerSetMockRecorder is the mock recorder for MockAbstractPeerSet
type MockAbstractPeerSetMockRecorder struct {
	mock *MockAbstractPeerSet
}

// NewMockAbstractPeerSet creates a new mock instance
func NewMockAbstractPeerSet(ctrl *gomock.Controller) *MockAbstractPeerSet {
	mock := &MockAbstractPeerSet{ctrl: ctrl}
	mock.recorder = &MockAbstractPeerSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAbstractPeerSet) EXPECT() *MockAbstractPeerSetMockRecorder {
	return m.recorder
}

// AddPeer mocks base method
func (m *MockAbstractPeerSet) AddPeer(arg0 PmAbstractPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockAbstractPeerSetMockRecorder) AddPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockAbstractPeerSet)(nil).AddPeer), arg0)
}

// BestPeer mocks base method
func (m *MockAbstractPeerSet) BestPeer() PmAbstractPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestPeer")
	ret0, _ := ret[0].(PmAbstractPeer)
	return ret0
}

// BestPeer indicates an expected call of BestPeer
func (mr *MockAbstractPeerSetMockRecorder) BestPeer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestPeer", reflect.TypeOf((*MockAbstractPeerSet)(nil).BestPeer))
}

// Close mocks base method
func (m *MockAbstractPeerSet) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockAbstractPeerSetMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAbstractPeerSet)(nil).Close))
}

// GetPeers mocks base method
func (m *MockAbstractPeerSet) GetPeers() map[string]PmAbstractPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].(map[string]PmAbstractPeer)
	return ret0
}

// GetPeers indicates an expected call of GetPeers
func (mr *MockAbstractPeerSetMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockAbstractPeerSet)(nil).GetPeers))
}

// GetPeersInfo mocks base method
func (m *MockAbstractPeerSet) GetPeersInfo() []*p2p.CsPeerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeersInfo")
	ret0, _ := ret[0].([]*p2p.CsPeerInfo)
	return ret0
}

// GetPeersInfo indicates an expected call of GetPeersInfo
func (mr *MockAbstractPeerSetMockRecorder) GetPeersInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeersInfo", reflect.TypeOf((*MockAbstractPeerSet)(nil).GetPeersInfo))
}

// Len mocks base method
func (m *MockAbstractPeerSet) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockAbstractPeerSetMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockAbstractPeerSet)(nil).Len))
}

// Peer mocks base method
func (m *MockAbstractPeerSet) Peer(arg0 string) PmAbstractPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peer", arg0)
	ret0, _ := ret[0].(PmAbstractPeer)
	return ret0
}

// Peer indicates an expected call of Peer
func (mr *MockAbstractPeerSetMockRecorder) Peer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peer", reflect.TypeOf((*MockAbstractPeerSet)(nil).Peer), arg0)
}

// RemovePeer mocks base method
func (m *MockAbstractPeerSet) RemovePeer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePeer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePeer indicates an expected call of RemovePeer
func (mr *MockAbstractPeerSetMockRecorder) RemovePeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockAbstractPeerSet)(nil).RemovePeer), arg0)
}

// ReplacePeers mocks base method
func (m *MockAbstractPeerSet) ReplacePeers(arg0 map[string]PmAbstractPeer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplacePeers", arg0)
}

// ReplacePeers indicates an expected call of ReplacePeers
func (mr *MockAbstractPeerSetMockRecorder) ReplacePeers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplacePeers", reflect.TypeOf((*MockAbstractPeerSet)(nil).ReplacePeers), arg0)
}
