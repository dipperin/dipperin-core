// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/chaincommunication (interfaces: CommunicationService)

// Package chaincommunication is a generated GoMock package.
package chaincommunication

import (
	p2p "github.com/dipperin/dipperin-core/third_party/p2p"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommunicationService is a mock of CommunicationService interface
type MockCommunicationService struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicationServiceMockRecorder
}

// MockCommunicationServiceMockRecorder is the mock recorder for MockCommunicationService
type MockCommunicationServiceMockRecorder struct {
	mock *MockCommunicationService
}

// NewMockCommunicationService creates a new mock instance
func NewMockCommunicationService(ctrl *gomock.Controller) *MockCommunicationService {
	mock := &MockCommunicationService{ctrl: ctrl}
	mock.recorder = &MockCommunicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommunicationService) EXPECT() *MockCommunicationServiceMockRecorder {
	return m.recorder
}

// MsgHandlers mocks base method
func (m *MockCommunicationService) MsgHandlers() map[uint64]func(p2p.Msg, PmAbstractPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MsgHandlers")
	ret0, _ := ret[0].(map[uint64]func(p2p.Msg, PmAbstractPeer) error)
	return ret0
}

// MsgHandlers indicates an expected call of MsgHandlers
func (mr *MockCommunicationServiceMockRecorder) MsgHandlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MsgHandlers", reflect.TypeOf((*MockCommunicationService)(nil).MsgHandlers))
}
