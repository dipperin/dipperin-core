// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/rpc-interface (interfaces: P2PAPI)

// Package rpc_interface is a generated GoMock package.
package rpc_interface

import (
	p2p "github.com/dipperin/dipperin-core/third-party/p2p"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockP2PAPI is a mock of P2PAPI interface
type MockP2PAPI struct {
	ctrl     *gomock.Controller
	recorder *MockP2PAPIMockRecorder
}

// MockP2PAPIMockRecorder is the mock recorder for MockP2PAPI
type MockP2PAPIMockRecorder struct {
	mock *MockP2PAPI
}

// NewMockP2PAPI creates a new mock instance
func NewMockP2PAPI(ctrl *gomock.Controller) *MockP2PAPI {
	mock := &MockP2PAPI{ctrl: ctrl}
	mock.recorder = &MockP2PAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockP2PAPI) EXPECT() *MockP2PAPIMockRecorder {
	return m.recorder
}

// AddPeer mocks base method
func (m *MockP2PAPI) AddPeer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockP2PAPIMockRecorder) AddPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockP2PAPI)(nil).AddPeer), arg0)
}

// AddTrustedPeer mocks base method
func (m *MockP2PAPI) AddTrustedPeer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrustedPeer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrustedPeer indicates an expected call of AddTrustedPeer
func (mr *MockP2PAPIMockRecorder) AddTrustedPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrustedPeer", reflect.TypeOf((*MockP2PAPI)(nil).AddTrustedPeer), arg0)
}

// CsPmInfo mocks base method
func (m *MockP2PAPI) CsPmInfo() (*p2p.CsPmPeerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CsPmInfo")
	ret0, _ := ret[0].(*p2p.CsPmPeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CsPmInfo indicates an expected call of CsPmInfo
func (mr *MockP2PAPIMockRecorder) CsPmInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsPmInfo", reflect.TypeOf((*MockP2PAPI)(nil).CsPmInfo))
}

// Peers mocks base method
func (m *MockP2PAPI) Peers() ([]*p2p.PeerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers")
	ret0, _ := ret[0].([]*p2p.PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peers indicates an expected call of Peers
func (mr *MockP2PAPIMockRecorder) Peers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockP2PAPI)(nil).Peers))
}

// RemovePeer mocks base method
func (m *MockP2PAPI) RemovePeer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePeer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePeer indicates an expected call of RemovePeer
func (mr *MockP2PAPIMockRecorder) RemovePeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockP2PAPI)(nil).RemovePeer), arg0)
}

// RemoveTrustedPeer mocks base method
func (m *MockP2PAPI) RemoveTrustedPeer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrustedPeer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrustedPeer indicates an expected call of RemoveTrustedPeer
func (mr *MockP2PAPIMockRecorder) RemoveTrustedPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrustedPeer", reflect.TypeOf((*MockP2PAPI)(nil).RemoveTrustedPeer), arg0)
}
