// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/contract (interfaces: AccountDB)

// Package contract is a generated GoMock package.
package contract

import (
	common "github.com/dipperin/dipperin-core/common"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockAccountDB is a mock of AccountDB interface
type MockAccountDB struct {
	ctrl     *gomock.Controller
	recorder *MockAccountDBMockRecorder
}

// MockAccountDBMockRecorder is the mock recorder for MockAccountDB
type MockAccountDBMockRecorder struct {
	mock *MockAccountDB
}

// NewMockAccountDB creates a new mock instance
func NewMockAccountDB(ctrl *gomock.Controller) *MockAccountDB {
	mock := &MockAccountDB{ctrl: ctrl}
	mock.recorder = &MockAccountDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountDB) EXPECT() *MockAccountDBMockRecorder {
	return m.recorder
}

// AddBalance mocks base method
func (m *MockAccountDB) AddBalance(arg0 common.Address, arg1 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBalance indicates an expected call of AddBalance
func (mr *MockAccountDBMockRecorder) AddBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockAccountDB)(nil).AddBalance), arg0, arg1)
}

// GetBalance mocks base method
func (m *MockAccountDB) GetBalance(arg0 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockAccountDBMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockAccountDB)(nil).GetBalance), arg0)
}

// SubBalance mocks base method
func (m *MockAccountDB) SubBalance(arg0 common.Address, arg1 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubBalance indicates an expected call of SubBalance
func (mr *MockAccountDBMockRecorder) SubBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockAccountDB)(nil).SubBalance), arg0, arg1)
}
