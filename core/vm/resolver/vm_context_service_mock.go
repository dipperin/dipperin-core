// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/vm/resolver (interfaces: VmContextService)

// Package resolver is a generated GoMock package.
package resolver

import (
	common "github.com/dipperin/dipperin-core/common"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockVmContextService is a mock of VmContextService interface
type MockVmContextService struct {
	ctrl     *gomock.Controller
	recorder *MockVmContextServiceMockRecorder
}

// MockVmContextServiceMockRecorder is the mock recorder for MockVmContextService
type MockVmContextServiceMockRecorder struct {
	mock *MockVmContextService
}

// NewMockVmContextService creates a new mock instance
func NewMockVmContextService(ctrl *gomock.Controller) *MockVmContextService {
	mock := &MockVmContextService{ctrl: ctrl}
	mock.recorder = &MockVmContextServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVmContextService) EXPECT() *MockVmContextServiceMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockVmContextService) Call(arg0 ContractRef, arg1 common.Address, arg2 []byte, arg3 uint64, arg4 *big.Int) ([]byte, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Call indicates an expected call of Call
func (mr *MockVmContextServiceMockRecorder) Call(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockVmContextService)(nil).Call), arg0, arg1, arg2, arg3, arg4)
}

// DelegateCall mocks base method
func (m *MockVmContextService) DelegateCall(arg0 ContractRef, arg1 common.Address, arg2 []byte, arg3 uint64) ([]byte, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateCall", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DelegateCall indicates an expected call of DelegateCall
func (mr *MockVmContextServiceMockRecorder) DelegateCall(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateCall", reflect.TypeOf((*MockVmContextService)(nil).DelegateCall), arg0, arg1, arg2, arg3)
}

// GetBlockHash mocks base method
func (m *MockVmContextService) GetBlockHash(arg0 uint64) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetBlockHash indicates an expected call of GetBlockHash
func (mr *MockVmContextServiceMockRecorder) GetBlockHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockVmContextService)(nil).GetBlockHash), arg0)
}

// GetBlockNumber mocks base method
func (m *MockVmContextService) GetBlockNumber() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockNumber")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBlockNumber indicates an expected call of GetBlockNumber
func (mr *MockVmContextServiceMockRecorder) GetBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockNumber", reflect.TypeOf((*MockVmContextService)(nil).GetBlockNumber))
}

// GetCoinBase mocks base method
func (m *MockVmContextService) GetCoinBase() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinBase")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetCoinBase indicates an expected call of GetCoinBase
func (mr *MockVmContextServiceMockRecorder) GetCoinBase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinBase", reflect.TypeOf((*MockVmContextService)(nil).GetCoinBase))
}

// GetGasLimit mocks base method
func (m *MockVmContextService) GetGasLimit() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasLimit")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGasLimit indicates an expected call of GetGasLimit
func (mr *MockVmContextServiceMockRecorder) GetGasLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasLimit", reflect.TypeOf((*MockVmContextService)(nil).GetGasLimit))
}

// GetGasPrice mocks base method
func (m *MockVmContextService) GetGasPrice() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasPrice")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetGasPrice indicates an expected call of GetGasPrice
func (mr *MockVmContextServiceMockRecorder) GetGasPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasPrice", reflect.TypeOf((*MockVmContextService)(nil).GetGasPrice))
}

// GetOrigin mocks base method
func (m *MockVmContextService) GetOrigin() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrigin")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetOrigin indicates an expected call of GetOrigin
func (mr *MockVmContextServiceMockRecorder) GetOrigin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrigin", reflect.TypeOf((*MockVmContextService)(nil).GetOrigin))
}

// GetTime mocks base method
func (m *MockVmContextService) GetTime() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetTime indicates an expected call of GetTime
func (mr *MockVmContextServiceMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockVmContextService)(nil).GetTime))
}

// GetTxHash mocks base method
func (m *MockVmContextService) GetTxHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetTxHash indicates an expected call of GetTxHash
func (mr *MockVmContextServiceMockRecorder) GetTxHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxHash", reflect.TypeOf((*MockVmContextService)(nil).GetTxHash))
}

// TransferValue mocks base method
func (m *MockVmContextService) TransferValue(arg0 ContractRef, arg1 common.Address, arg2 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferValue indicates an expected call of TransferValue
func (mr *MockVmContextServiceMockRecorder) TransferValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferValue", reflect.TypeOf((*MockVmContextService)(nil).TransferValue), arg0, arg1, arg2)
}
