// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/mine/minemaster (interfaces: BlockBroadcaster)

// Package minemaster is a generated GoMock package.
package minemaster

import (
	model "github.com/dipperin/dipperin-core/core/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockBroadcaster is a mock of BlockBroadcaster interface
type MockBlockBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockBlockBroadcasterMockRecorder
}

// MockBlockBroadcasterMockRecorder is the mock recorder for MockBlockBroadcaster
type MockBlockBroadcasterMockRecorder struct {
	mock *MockBlockBroadcaster
}

// NewMockBlockBroadcaster creates a new mock instance
func NewMockBlockBroadcaster(ctrl *gomock.Controller) *MockBlockBroadcaster {
	mock := &MockBlockBroadcaster{ctrl: ctrl}
	mock.recorder = &MockBlockBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockBroadcaster) EXPECT() *MockBlockBroadcasterMockRecorder {
	return m.recorder
}

// BroadcastMinedBlock mocks base method
func (m *MockBlockBroadcaster) BroadcastMinedBlock(arg0 model.AbstractBlock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastMinedBlock", arg0)
}

// BroadcastMinedBlock indicates an expected call of BroadcastMinedBlock
func (mr *MockBlockBroadcasterMockRecorder) BroadcastMinedBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMinedBlock", reflect.TypeOf((*MockBlockBroadcaster)(nil).BroadcastMinedBlock), arg0)
}
