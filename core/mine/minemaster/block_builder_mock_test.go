// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/mine/minemaster (interfaces: BlockBuilder)

// Package minemaster is a generated GoMock package.
package minemaster

import (
	common "github.com/dipperin/dipperin-core/common"
	chaincommunication "github.com/dipperin/dipperin-core/core/chaincommunication"
	model "github.com/dipperin/dipperin-core/core/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockBuilder is a mock of BlockBuilder interface
type MockBlockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBlockBuilderMockRecorder
}

// MockBlockBuilderMockRecorder is the mock recorder for MockBlockBuilder
type MockBlockBuilderMockRecorder struct {
	mock *MockBlockBuilder
}

// NewMockBlockBuilder creates a new mock instance
func NewMockBlockBuilder(ctrl *gomock.Controller) *MockBlockBuilder {
	mock := &MockBlockBuilder{ctrl: ctrl}
	mock.recorder = &MockBlockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockBuilder) EXPECT() *MockBlockBuilderMockRecorder {
	return m.recorder
}

// BuildWaitPackBlock mocks base method
func (m *MockBlockBuilder) BuildWaitPackBlock(arg0 common.Address, arg1, arg2 uint64) model.AbstractBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildWaitPackBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.AbstractBlock)
	return ret0
}

// BuildWaitPackBlock indicates an expected call of BuildWaitPackBlock
func (mr *MockBlockBuilderMockRecorder) BuildWaitPackBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildWaitPackBlock", reflect.TypeOf((*MockBlockBuilder)(nil).BuildWaitPackBlock), arg0, arg1, arg2)
}

// GetMsgSigner mocks base method
func (m *MockBlockBuilder) GetMsgSigner() chaincommunication.PbftSigner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsgSigner")
	ret0, _ := ret[0].(chaincommunication.PbftSigner)
	return ret0
}

// GetMsgSigner indicates an expected call of GetMsgSigner
func (mr *MockBlockBuilderMockRecorder) GetMsgSigner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgSigner", reflect.TypeOf((*MockBlockBuilder)(nil).GetMsgSigner))
}

// SetMsgSigner mocks base method
func (m *MockBlockBuilder) SetMsgSigner(arg0 chaincommunication.PbftSigner) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMsgSigner", arg0)
}

// SetMsgSigner indicates an expected call of SetMsgSigner
func (mr *MockBlockBuilderMockRecorder) SetMsgSigner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMsgSigner", reflect.TypeOf((*MockBlockBuilder)(nil).SetMsgSigner), arg0)
}
