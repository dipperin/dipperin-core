// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/mine/minemaster (interfaces: MasterServer)

// Package minemaster is a generated GoMock package.
package minemaster

import (
	chaincommunication "github.com/dipperin/dipperin-core/core/chaincommunication"
	p2p "github.com/dipperin/dipperin-core/third_party/p2p"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMasterServer is a mock of MasterServer interface
type MockMasterServer struct {
	ctrl     *gomock.Controller
	recorder *MockMasterServerMockRecorder
}

// MockMasterServerMockRecorder is the mock recorder for MockMasterServer
type MockMasterServerMockRecorder struct {
	mock *MockMasterServer
}

// NewMockMasterServer creates a new mock instance
func NewMockMasterServer(ctrl *gomock.Controller) *MockMasterServer {
	mock := &MockMasterServer{ctrl: ctrl}
	mock.recorder = &MockMasterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMasterServer) EXPECT() *MockMasterServerMockRecorder {
	return m.recorder
}

// OnNewMsg mocks base method
func (m *MockMasterServer) OnNewMsg(arg0 p2p.Msg, arg1 chaincommunication.PmAbstractPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnNewMsg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnNewMsg indicates an expected call of OnNewMsg
func (mr *MockMasterServerMockRecorder) OnNewMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewMsg", reflect.TypeOf((*MockMasterServer)(nil).OnNewMsg), arg0, arg1)
}

// ReceiveMsg mocks base method
func (m *MockMasterServer) ReceiveMsg(arg0 WorkerId, arg1 uint64, arg2 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveMsg", arg0, arg1, arg2)
}

// ReceiveMsg indicates an expected call of ReceiveMsg
func (mr *MockMasterServerMockRecorder) ReceiveMsg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMsg", reflect.TypeOf((*MockMasterServer)(nil).ReceiveMsg), arg0, arg1, arg2)
}

// RegisterWorker mocks base method
func (m *MockMasterServer) RegisterWorker(arg0 WorkerForMaster) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterWorker", arg0)
}

// RegisterWorker indicates an expected call of RegisterWorker
func (mr *MockMasterServerMockRecorder) RegisterWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWorker", reflect.TypeOf((*MockMasterServer)(nil).RegisterWorker), arg0)
}

// SetMineMasterPeer mocks base method
func (m *MockMasterServer) SetMineMasterPeer(arg0 chaincommunication.PmAbstractPeer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMineMasterPeer", arg0)
}

// SetMineMasterPeer indicates an expected call of SetMineMasterPeer
func (mr *MockMasterServerMockRecorder) SetMineMasterPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMineMasterPeer", reflect.TypeOf((*MockMasterServer)(nil).SetMineMasterPeer), arg0)
}

// UnRegisterWorker mocks base method
func (m *MockMasterServer) UnRegisterWorker(arg0 WorkerId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnRegisterWorker", arg0)
}

// UnRegisterWorker indicates an expected call of UnRegisterWorker
func (mr *MockMasterServerMockRecorder) UnRegisterWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegisterWorker", reflect.TypeOf((*MockMasterServer)(nil).UnRegisterWorker), arg0)
}
