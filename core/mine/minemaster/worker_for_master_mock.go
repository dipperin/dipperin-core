// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/mine/minemaster (interfaces: WorkerForMaster)

// Package minemaster is a generated GoMock package.
package minemaster

import (
	common "github.com/dipperin/dipperin-core/common"
	minemsg "github.com/dipperin/dipperin-core/core/mine/minemsg"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWorkerForMaster is a mock of WorkerForMaster interface
type MockWorkerForMaster struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerForMasterMockRecorder
}

// MockWorkerForMasterMockRecorder is the mock recorder for MockWorkerForMaster
type MockWorkerForMasterMockRecorder struct {
	mock *MockWorkerForMaster
}

// NewMockWorkerForMaster creates a new mock instance
func NewMockWorkerForMaster(ctrl *gomock.Controller) *MockWorkerForMaster {
	mock := &MockWorkerForMaster{ctrl: ctrl}
	mock.recorder = &MockWorkerForMasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkerForMaster) EXPECT() *MockWorkerForMasterMockRecorder {
	return m.recorder
}

// CurrentCoinbaseAddress mocks base method
func (m *MockWorkerForMaster) CurrentCoinbaseAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentCoinbaseAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// CurrentCoinbaseAddress indicates an expected call of CurrentCoinbaseAddress
func (mr *MockWorkerForMasterMockRecorder) CurrentCoinbaseAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentCoinbaseAddress", reflect.TypeOf((*MockWorkerForMaster)(nil).CurrentCoinbaseAddress))
}

// GetId mocks base method
func (m *MockWorkerForMaster) GetId() WorkerId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(WorkerId)
	return ret0
}

// GetId indicates an expected call of GetId
func (mr *MockWorkerForMasterMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockWorkerForMaster)(nil).GetId))
}

// SendNewWork mocks base method
func (m *MockWorkerForMaster) SendNewWork(arg0 int, arg1 minemsg.Work) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNewWork", arg0, arg1)
}

// SendNewWork indicates an expected call of SendNewWork
func (mr *MockWorkerForMasterMockRecorder) SendNewWork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNewWork", reflect.TypeOf((*MockWorkerForMaster)(nil).SendNewWork), arg0, arg1)
}

// SetCoinbase mocks base method
func (m *MockWorkerForMaster) SetCoinbase(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCoinbase", arg0)
}

// SetCoinbase indicates an expected call of SetCoinbase
func (mr *MockWorkerForMasterMockRecorder) SetCoinbase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCoinbase", reflect.TypeOf((*MockWorkerForMaster)(nil).SetCoinbase), arg0)
}

// Start mocks base method
func (m *MockWorkerForMaster) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockWorkerForMasterMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWorkerForMaster)(nil).Start))
}

// Stop mocks base method
func (m *MockWorkerForMaster) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockWorkerForMasterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorkerForMaster)(nil).Stop))
}
