// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/verifiers-halt-check (interfaces: CsProtocolFunction)

// Package verifiers_halt_check is a generated GoMock package.
package verifiers_halt_check

import (
	chain_communication "github.com/dipperin/dipperin-core/core/chain-communication"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCsProtocolFunction is a mock of CsProtocolFunction interface
type MockCsProtocolFunction struct {
	ctrl     *gomock.Controller
	recorder *MockCsProtocolFunctionMockRecorder
}

// MockCsProtocolFunctionMockRecorder is the mock recorder for MockCsProtocolFunction
type MockCsProtocolFunctionMockRecorder struct {
	mock *MockCsProtocolFunction
}

// NewMockCsProtocolFunction creates a new mock instance
func NewMockCsProtocolFunction(ctrl *gomock.Controller) *MockCsProtocolFunction {
	mock := &MockCsProtocolFunction{ctrl: ctrl}
	mock.recorder = &MockCsProtocolFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCsProtocolFunction) EXPECT() *MockCsProtocolFunctionMockRecorder {
	return m.recorder
}

// GetCurrentVerifierPeers mocks base method
func (m *MockCsProtocolFunction) GetCurrentVerifierPeers() map[string]chain_communication.PmAbstractPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVerifierPeers")
	ret0, _ := ret[0].(map[string]chain_communication.PmAbstractPeer)
	return ret0
}

// GetCurrentVerifierPeers indicates an expected call of GetCurrentVerifierPeers
func (mr *MockCsProtocolFunctionMockRecorder) GetCurrentVerifierPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVerifierPeers", reflect.TypeOf((*MockCsProtocolFunction)(nil).GetCurrentVerifierPeers))
}

// GetNextVerifierPeers mocks base method
func (m *MockCsProtocolFunction) GetNextVerifierPeers() map[string]chain_communication.PmAbstractPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextVerifierPeers")
	ret0, _ := ret[0].(map[string]chain_communication.PmAbstractPeer)
	return ret0
}

// GetNextVerifierPeers indicates an expected call of GetNextVerifierPeers
func (mr *MockCsProtocolFunctionMockRecorder) GetNextVerifierPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextVerifierPeers", reflect.TypeOf((*MockCsProtocolFunction)(nil).GetNextVerifierPeers))
}

// GetVerifierBootNode mocks base method
func (m *MockCsProtocolFunction) GetVerifierBootNode() map[string]chain_communication.PmAbstractPeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifierBootNode")
	ret0, _ := ret[0].(map[string]chain_communication.PmAbstractPeer)
	return ret0
}

// GetVerifierBootNode indicates an expected call of GetVerifierBootNode
func (mr *MockCsProtocolFunctionMockRecorder) GetVerifierBootNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifierBootNode", reflect.TypeOf((*MockCsProtocolFunction)(nil).GetVerifierBootNode))
}
