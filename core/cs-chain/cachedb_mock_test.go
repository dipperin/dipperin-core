// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/cs-chain (interfaces: CacheDB)

// Package cs_chain is a generated GoMock package.
package cs_chain

import (
	common "github.com/dipperin/dipperin-core/common"
	model "github.com/dipperin/dipperin-core/core/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCacheDB is a mock of CacheDB interface
type MockCacheDB struct {
	ctrl     *gomock.Controller
	recorder *MockCacheDBMockRecorder
}

// MockCacheDBMockRecorder is the mock recorder for MockCacheDB
type MockCacheDBMockRecorder struct {
	mock *MockCacheDB
}

// NewMockCacheDB creates a new mock instance
func NewMockCacheDB(ctrl *gomock.Controller) *MockCacheDB {
	mock := &MockCacheDB{ctrl: ctrl}
	mock.recorder = &MockCacheDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheDB) EXPECT() *MockCacheDBMockRecorder {
	return m.recorder
}

// DeleteSeenCommits mocks base method
func (m *MockCacheDB) DeleteSeenCommits(arg0 uint64, arg1 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeenCommits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeenCommits indicates an expected call of DeleteSeenCommits
func (mr *MockCacheDBMockRecorder) DeleteSeenCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeenCommits", reflect.TypeOf((*MockCacheDB)(nil).DeleteSeenCommits), arg0, arg1)
}

// GetSeenCommits mocks base method
func (m *MockCacheDB) GetSeenCommits(arg0 uint64, arg1 common.Hash) ([]model.AbstractVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeenCommits", arg0, arg1)
	ret0, _ := ret[0].([]model.AbstractVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeenCommits indicates an expected call of GetSeenCommits
func (mr *MockCacheDBMockRecorder) GetSeenCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeenCommits", reflect.TypeOf((*MockCacheDB)(nil).GetSeenCommits), arg0, arg1)
}

// SaveSeenCommits mocks base method
func (m *MockCacheDB) SaveSeenCommits(arg0 uint64, arg1 common.Hash, arg2 []model.AbstractVerification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSeenCommits", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSeenCommits indicates an expected call of SaveSeenCommits
func (mr *MockCacheDBMockRecorder) SaveSeenCommits(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSeenCommits", reflect.TypeOf((*MockCacheDB)(nil).SaveSeenCommits), arg0, arg1, arg2)
}
