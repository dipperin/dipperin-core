// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/csbft/components (interfaces: Blockpoolconfig)

// Package components is a generated GoMock package.
package components

import (
	model "github.com/dipperin/dipperin-core/core/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockpoolconfig is a mock of Blockpoolconfig interface
type MockBlockpoolconfig struct {
	ctrl     *gomock.Controller
	recorder *MockBlockpoolconfigMockRecorder
}

// MockBlockpoolconfigMockRecorder is the mock recorder for MockBlockpoolconfig
type MockBlockpoolconfigMockRecorder struct {
	mock *MockBlockpoolconfig
}

// NewMockBlockpoolconfig creates a new mock instance
func NewMockBlockpoolconfig(ctrl *gomock.Controller) *MockBlockpoolconfig {
	mock := &MockBlockpoolconfig{ctrl: ctrl}
	mock.recorder = &MockBlockpoolconfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockpoolconfig) EXPECT() *MockBlockpoolconfigMockRecorder {
	return m.recorder
}

// CurrentBlock mocks base method
func (m *MockBlockpoolconfig) CurrentBlock() model.AbstractBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(model.AbstractBlock)
	return ret0
}

// CurrentBlock indicates an expected call of CurrentBlock
func (mr *MockBlockpoolconfigMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockBlockpoolconfig)(nil).CurrentBlock))
}
