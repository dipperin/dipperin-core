// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/model (interfaces: AbstractVerification)

// Package economy_model is a generated GoMock package.
package economy_model

import (
	common "github.com/dipperin/dipperin-core/common"
	model "github.com/dipperin/dipperin-core/core/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAbstractVerification is a mock of AbstractVerification interface
type MockAbstractVerification struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractVerificationMockRecorder
}

// MockAbstractVerificationMockRecorder is the mock recorder for MockAbstractVerification
type MockAbstractVerificationMockRecorder struct {
	mock *MockAbstractVerification
}

// NewMockAbstractVerification creates a new mock instance
func NewMockAbstractVerification(ctrl *gomock.Controller) *MockAbstractVerification {
	mock := &MockAbstractVerification{ctrl: ctrl}
	mock.recorder = &MockAbstractVerificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAbstractVerification) EXPECT() *MockAbstractVerificationMockRecorder {
	return m.recorder
}

// GetAddress mocks base method
func (m *MockAbstractVerification) GetAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockAbstractVerificationMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockAbstractVerification)(nil).GetAddress))
}

// GetBlockHash mocks base method
func (m *MockAbstractVerification) GetBlockHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBlockHash indicates an expected call of GetBlockHash
func (mr *MockAbstractVerificationMockRecorder) GetBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockAbstractVerification)(nil).GetBlockHash))
}

// GetBlockId mocks base method
func (m *MockAbstractVerification) GetBlockId() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockId")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetBlockId indicates an expected call of GetBlockId
func (mr *MockAbstractVerificationMockRecorder) GetBlockId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockId", reflect.TypeOf((*MockAbstractVerification)(nil).GetBlockId))
}

// GetHeight mocks base method
func (m *MockAbstractVerification) GetHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetHeight indicates an expected call of GetHeight
func (mr *MockAbstractVerificationMockRecorder) GetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockAbstractVerification)(nil).GetHeight))
}

// GetRound mocks base method
func (m *MockAbstractVerification) GetRound() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRound")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRound indicates an expected call of GetRound
func (mr *MockAbstractVerificationMockRecorder) GetRound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRound", reflect.TypeOf((*MockAbstractVerification)(nil).GetRound))
}

// GetType mocks base method
func (m *MockAbstractVerification) GetType() model.VoteMsgType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(model.VoteMsgType)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockAbstractVerificationMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockAbstractVerification)(nil).GetType))
}

// GetViewID mocks base method
func (m *MockAbstractVerification) GetViewID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetViewID indicates an expected call of GetViewID
func (mr *MockAbstractVerificationMockRecorder) GetViewID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewID", reflect.TypeOf((*MockAbstractVerification)(nil).GetViewID))
}

// HaltedVoteValid mocks base method
func (m *MockAbstractVerification) HaltedVoteValid(arg0 []common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HaltedVoteValid", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HaltedVoteValid indicates an expected call of HaltedVoteValid
func (mr *MockAbstractVerificationMockRecorder) HaltedVoteValid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HaltedVoteValid", reflect.TypeOf((*MockAbstractVerification)(nil).HaltedVoteValid), arg0)
}

// Valid mocks base method
func (m *MockAbstractVerification) Valid() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid")
	ret0, _ := ret[0].(error)
	return ret0
}

// Valid indicates an expected call of Valid
func (mr *MockAbstractVerificationMockRecorder) Valid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockAbstractVerification)(nil).Valid))
}
