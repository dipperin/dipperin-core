// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/tx-pool (interfaces: BlockChain)

// Package tx_pool is a generated GoMock package.
package tx_pool

import (
	common "github.com/dipperin/dipperin-core/common"
	state_processor "github.com/dipperin/dipperin-core/core/chain/state-processor"
	model "github.com/dipperin/dipperin-core/core/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockChain is a mock of BlockChain interface
type MockBlockChain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockChainMockRecorder
}

// MockBlockChainMockRecorder is the mock recorder for MockBlockChain
type MockBlockChainMockRecorder struct {
	mock *MockBlockChain
}

// NewMockBlockChain creates a new mock instance
func NewMockBlockChain(ctrl *gomock.Controller) *MockBlockChain {
	mock := &MockBlockChain{ctrl: ctrl}
	mock.recorder = &MockBlockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockChain) EXPECT() *MockBlockChainMockRecorder {
	return m.recorder
}

// CurrentBlock mocks base method
func (m *MockBlockChain) CurrentBlock() model.AbstractBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(model.AbstractBlock)
	return ret0
}

// CurrentBlock indicates an expected call of CurrentBlock
func (mr *MockBlockChainMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockBlockChain)(nil).CurrentBlock))
}

// GetBlockByNumber mocks base method
func (m *MockBlockChain) GetBlockByNumber(arg0 uint64) model.AbstractBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", arg0)
	ret0, _ := ret[0].(model.AbstractBlock)
	return ret0
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockBlockChainMockRecorder) GetBlockByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockBlockChain)(nil).GetBlockByNumber), arg0)
}

// StateAtByStateRoot mocks base method
func (m *MockBlockChain) StateAtByStateRoot(arg0 common.Hash) (*state_processor.AccountStateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAtByStateRoot", arg0)
	ret0, _ := ret[0].(*state_processor.AccountStateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateAtByStateRoot indicates an expected call of StateAtByStateRoot
func (mr *MockBlockChainMockRecorder) StateAtByStateRoot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAtByStateRoot", reflect.TypeOf((*MockBlockChain)(nil).StateAtByStateRoot), arg0)
}
